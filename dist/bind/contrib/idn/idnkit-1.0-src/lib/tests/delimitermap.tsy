#ifndef lint
static char *rcsid = "$Id: delimitermap.tsy,v 1.1.1.1 2003-06-04 00:26:53 marka Exp $";
#endif

/*
 * Copyright (c) 2002 Japan Network Information Center.
 * All rights reserved.
 *  
 * By using this file, you agree to the terms and conditions set forth bellow.
 * 
 * 			LICENSE TERMS AND CONDITIONS 
 * 
 * The following License Terms and Conditions apply, unless a different
 * license is obtained from Japan Network Information Center ("JPNIC"),
 * a Japanese association, Kokusai-Kougyou-Kanda Bldg 6F, 2-3-4 Uchi-Kanda,
 * Chiyoda-ku, Tokyo 101-0047, Japan.
 * 
 * 1. Use, Modification and Redistribution (including distribution of any
 *    modified or derived work) in source and/or binary forms is permitted
 *    under this License Terms and Conditions.
 * 
 * 2. Redistribution of source code must retain the copyright notices as they
 *    appear in each source code file, this License Terms and Conditions.
 * 
 * 3. Redistribution in binary form must reproduce the Copyright Notice,
 *    this License Terms and Conditions, in the documentation and/or other
 *    materials provided with the distribution.  For the purposes of binary
 *    distribution the "Copyright Notice" refers to the following language:
 *    "Copyright (c) 2000-2002 Japan Network Information Center.  All rights reserved."
 * 
 * 4. The name of JPNIC may not be used to endorse or promote products
 *    derived from this Software without specific prior written approval of
 *    JPNIC.
 * 
 * 5. Disclaimer/Limitation of Liability: THIS SOFTWARE IS PROVIDED BY JPNIC
 *    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 *    PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL JPNIC BE LIABLE
 *    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 *    BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 *    OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 *    ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 */

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <idn/delimitermap.h>
#include <idn/ucs4.h>
#include <idn/log.h>
#include "testutil.h"

/*
 * Codepoions to test the add() function.
 */
#define ADDITIONAL_DELIMITER0	0xe0
#define ADDITIONAL_DELIMITER1	0xe1

/*
 * Sample string for `from' argument of map(),
 * and its expected outputs.
 */
static const unsigned long from[] = {
	0x002e, /* full stop */
	0x3002, /* ideographic full stop */
	0xff0e, /* fullwidth full stop */
	0xff61, /* halfwidth ideographic full stop */
	ADDITIONAL_DELIMITER0,
	ADDITIONAL_DELIMITER1,
	0x0000
};

static const unsigned long expected_default[] = {
	0x002e, /* full stop */
	0x002e, /* full stop */
	0x002e, /* full stop */
	0x002e, /* full stop */
	ADDITIONAL_DELIMITER0,
	ADDITIONAL_DELIMITER1,
	0x0000
};

static const unsigned long expected_add[] = {
	0x002e, /* full stop */
	0x002e, /* full stop */
	0x002e, /* full stop */
	0x002e, /* full stop */
	0x002e, /* full stop */
	ADDITIONAL_DELIMITER1,
	0x0000
};

static const unsigned long expected_addall[] = {
	0x002e, /* full stop */
	0x002e, /* full stop */
	0x002e, /* full stop */
	0x002e, /* full stop */
	0x002e, /* full stop */
	0x002e, /* full stop */
	0x0000
};

//--------------------------------------------------------------------
// Setups and Teardowns.
//--------------------------------------------------------------------

//# SETUP
//      group: generic-init
{
	idn_result_t r;
	idn_delimitermap_t ctx;
	unsigned long to[256];

	r = idn_delimitermap_create(&ctx);
	ASSERT_RESULT(r, idn_success);
}

//# TEARDOWN
//      group: generic-init
{
	if (ctx != NULL)
		idn_delimitermap_destroy(ctx);
}

//# SETUP
//	group: quiet
{
	int saved_log_level;

	saved_log_level = idn_log_getlevel();
	idn_log_setlevel(idn_log_level_fatal);
}

//# TEARDOWN
//	group: quiet
{
	idn_log_setlevel(saved_log_level);
}

//--------------------------------------------------------------------
// Testcases.
//--------------------------------------------------------------------

//# TESTCASE
//	title: call create()
//	group: generic-init
{
}

//# TESTCASE
//	title: call map() without additional delimiters
//	group: generic-init
{
	r = idn_delimitermap_map(ctx, from, to, sizeof(to) / sizeof(*to));
	ASSERT_RESULT(r, idn_success);
	ASSERT_UCS4STRING(to, expected_default);
}

//# TESTCASE
//	title: call add() and map()
//	group: generic-init
{
	r = idn_delimitermap_add(ctx, ADDITIONAL_DELIMITER0);
	ASSERT_RESULT(r, idn_success);

	r = idn_delimitermap_map(ctx, from, to, sizeof(to) / sizeof(*to));
	ASSERT_RESULT(r, idn_success);
	ASSERT_UCS4STRING(to, expected_add);
}

//# TESTCASE
//	title: call addall()
//	group: generic-init
{
	unsigned long delimiters[2];

	delimiters[0] = ADDITIONAL_DELIMITER0;
	delimiters[1] = ADDITIONAL_DELIMITER1;
	r = idn_delimitermap_addall(ctx, delimiters, 2);
	ASSERT_RESULT(r, idn_success);

	r = idn_delimitermap_map(ctx, from, to, sizeof(to) / sizeof(*to));
	ASSERT_RESULT(r, idn_success);
	ASSERT_UCS4STRING(to, expected_addall);
}

//# TESTCASE
//	title: call addall() with nnames=0
//	group: generic-init
{
	unsigned long delimiters[2];

	r = idn_delimitermap_addall(ctx, delimiters, 0);
	ASSERT_RESULT(r, idn_success);

	r = idn_delimitermap_map(ctx, from, to, sizeof(to) / sizeof(*to));
	ASSERT_RESULT(r, idn_success);
	ASSERT_UCS4STRING(to, expected_default);
}

//# TESTCASE
//	title: call add() with invalid codepoint
//	group: generic-init quiet
{
	r = idn_delimitermap_add(ctx, 0x0000);  /* NUL */
	ASSERT_RESULT(r, idn_invalid_codepoint);

	r = idn_delimitermap_add(ctx, 0xd800);  /* surrogate */
	ASSERT_RESULT(r, idn_invalid_codepoint);

	r = idn_delimitermap_add(ctx, 0x110000); /* out of range */
	ASSERT_RESULT(r, idn_invalid_codepoint);
}

//# TESTCASE
//	title: call addall() with invalid codepoint
//	group: generic-init quiet
{
	unsigned long delimiters[1];

	delimiters[0] = 0x0000;  /* NUL */
	r = idn_delimitermap_addall(ctx, delimiters, 1);
	ASSERT_RESULT(r, idn_invalid_codepoint);

	delimiters[0] = 0xd800;  /* surrogate */
	r = idn_delimitermap_addall(ctx, delimiters, 1);
	ASSERT_RESULT(r, idn_invalid_codepoint);

	delimiters[0] = 0x110000;  /* out of range */
	r = idn_delimitermap_addall(ctx, delimiters, 1);
	ASSERT_RESULT(r, idn_invalid_codepoint);
}

//# TESTCASE
//	title: overrun test for arg `to' of map()
//	group: generic-init
{
	r = idn_delimitermap_map(ctx, from, to,
				 idn_ucs4_strlen(expected_default) + 1);
	ASSERT_RESULT(r, idn_success);
	ASSERT_UCS4STRING(to, expected_default);
	r = idn_delimitermap_map(ctx, from, to,
				 idn_ucs4_strlen(expected_default));
	ASSERT_RESULT(r, idn_buffer_overflow);
}

//# TESTCASE
//	title: call map() with tolen=0
//	group: generic-init
{
	r = idn_delimitermap_map(ctx, from, to, 0);
	ASSERT_RESULT(r, idn_buffer_overflow);
}
