.\"	$NetBSD: SSL_CTX_set_tmp_rsa_callback.3,v 1.14 2015/06/12 17:01:14 christos Exp $
.\"
.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SSL_CTX_set_tmp_rsa_callback 3"
.TH SSL_CTX_set_tmp_rsa_callback 3 "2015-01-13" "1.0.1n" "OpenSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SSL_CTX_set_tmp_rsa_callback, SSL_CTX_set_tmp_rsa, SSL_CTX_need_tmp_rsa, SSL_set_tmp_rsa_callback, SSL_set_tmp_rsa, SSL_need_tmp_rsa \- handle RSA keys for ephemeral key exchange
.SH "LIBRARY"
libcrypto, -lcrypto
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/ssl.h>
\&
\& void SSL_CTX_set_tmp_rsa_callback(SSL_CTX *ctx,
\&            RSA *(*tmp_rsa_callback)(SSL *ssl, int is_export, int keylength));
\& long SSL_CTX_set_tmp_rsa(SSL_CTX *ctx, RSA *rsa);
\& long SSL_CTX_need_tmp_rsa(SSL_CTX *ctx);
\&
\& void SSL_set_tmp_rsa_callback(SSL_CTX *ctx,
\&            RSA *(*tmp_rsa_callback)(SSL *ssl, int is_export, int keylength));
\& long SSL_set_tmp_rsa(SSL *ssl, RSA *rsa)
\& long SSL_need_tmp_rsa(SSL *ssl)
\&
\& RSA *(*tmp_rsa_callback)(SSL *ssl, int is_export, int keylength);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fISSL_CTX_set_tmp_rsa_callback()\fR sets the callback function for \fBctx\fR to be
used when a temporary/ephemeral \s-1RSA\s0 key is required to \fBtmp_rsa_callback\fR.
The callback is inherited by all \s-1SSL\s0 objects newly created from \fBctx\fR
with <\fISSL_new\fR\|(3)|\fISSL_new\fR\|(3)>. Already created \s-1SSL\s0 objects are not affected.
.PP
\&\fISSL_CTX_set_tmp_rsa()\fR sets the temporary/ephemeral \s-1RSA\s0 key to be used to be
\&\fBrsa\fR. The key is inherited by all \s-1SSL\s0 objects newly created from \fBctx\fR
with <\fISSL_new\fR\|(3)|\fISSL_new\fR\|(3)>. Already created \s-1SSL\s0 objects are not affected.
.PP
\&\fISSL_CTX_need_tmp_rsa()\fR returns 1, if a temporary/ephemeral \s-1RSA\s0 key is needed
for RSA-based strength-limited 'exportable' ciphersuites because a \s-1RSA\s0 key
with a keysize larger than 512 bits is installed.
.PP
\&\fISSL_set_tmp_rsa_callback()\fR sets the callback only for \fBssl\fR.
.PP
\&\fISSL_set_tmp_rsa()\fR sets the key only for \fBssl\fR.
.PP
\&\fISSL_need_tmp_rsa()\fR returns 1, if a temporary/ephemeral \s-1RSA\s0 key is needed,
for RSA-based strength-limited 'exportable' ciphersuites because a \s-1RSA\s0 key
with a keysize larger than 512 bits is installed.
.PP
These functions apply to \s-1SSL/TLS\s0 servers only.
.SH "NOTES"
.IX Header "NOTES"
When using a cipher with \s-1RSA\s0 authentication, an ephemeral \s-1RSA\s0 key exchange
can take place. In this case the session data are negotiated using the
ephemeral/temporary \s-1RSA\s0 key and the \s-1RSA\s0 key supplied and certified
by the certificate chain is only used for signing.
.PP
Under previous export restrictions, ciphers with \s-1RSA\s0 keys shorter (512 bits)
than the usual key length of 1024 bits were created. To use these ciphers
with \s-1RSA\s0 keys of usual length, an ephemeral key exchange must be performed,
as the normal (certified) key cannot be directly used.
.PP
Using ephemeral \s-1RSA\s0 key exchange yields forward secrecy, as the connection
can only be decrypted, when the \s-1RSA\s0 key is known. By generating a temporary
\&\s-1RSA\s0 key inside the server application that is lost when the application
is left, it becomes impossible for an attacker to decrypt past sessions,
even if he gets hold of the normal (certified) \s-1RSA\s0 key, as this key was
used for signing only. The downside is that creating a \s-1RSA\s0 key is
computationally expensive.
.PP
Additionally, the use of ephemeral \s-1RSA\s0 key exchange is only allowed in
the \s-1TLS\s0 standard, when the \s-1RSA\s0 key can be used for signing only, that is
for export ciphers. Using ephemeral \s-1RSA\s0 key exchange for other purposes
violates the standard and can break interoperability with clients.
It is therefore strongly recommended to not use ephemeral \s-1RSA\s0 key
exchange and use \s-1EDH \s0(Ephemeral Diffie-Hellman) key exchange instead
in order to achieve forward secrecy (see
\&\fISSL_CTX_set_tmp_dh_callback\fR\|(3)).
.PP
An application may either directly specify the key or can supply the key via a
callback function. The callback approach has the advantage, that the callback
may generate the key only in case it is actually needed. As the generation of a
\&\s-1RSA\s0 key is however costly, it will lead to a significant delay in the handshake
procedure.  Another advantage of the callback function is that it can supply
keys of different size while the explicit setting of the key is only useful for
key size of 512 bits to satisfy the export restricted ciphers and does give
away key length if a longer key would be allowed.
.PP
The \fBtmp_rsa_callback\fR is called with the \fBkeylength\fR needed and
the \fBis_export\fR information. The \fBis_export\fR flag is set, when the
ephemeral \s-1RSA\s0 key exchange is performed with an export cipher.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Generate temporary \s-1RSA\s0 keys to prepare ephemeral \s-1RSA\s0 key exchange. As the
generation of a \s-1RSA\s0 key costs a lot of computer time, they saved for later
reuse. For demonstration purposes, two keys for 512 bits and 1024 bits
respectively are generated.
.PP
.Vb 4
\& ...
\& /* Set up ephemeral RSA stuff */
\& RSA *rsa_512 = NULL;
\& RSA *rsa_1024 = NULL;
\&
\& rsa_512 = RSA_generate_key(512,RSA_F4,NULL,NULL);
\& if (rsa_512 == NULL)
\&     evaluate_error_queue();
\&
\& rsa_1024 = RSA_generate_key(1024,RSA_F4,NULL,NULL);
\& if (rsa_1024 == NULL)
\&   evaluate_error_queue();
\&
\& ...
\&
\& RSA *tmp_rsa_callback(SSL *s, int is_export, int keylength)
\& {
\&    RSA *rsa_tmp=NULL;
\&
\&    switch (keylength) {
\&    case 512:
\&      if (rsa_512)
\&        rsa_tmp = rsa_512;
\&      else { /* generate on the fly, should not happen in this example */
\&        rsa_tmp = RSA_generate_key(keylength,RSA_F4,NULL,NULL);
\&        rsa_512 = rsa_tmp; /* Remember for later reuse */
\&      }
\&      break;
\&    case 1024:
\&      if (rsa_1024)
\&        rsa_tmp=rsa_1024;
\&      else
\&        should_not_happen_in_this_example();
\&      break;
\&    default:
\&      /* Generating a key on the fly is very costly, so use what is there */
\&      if (rsa_1024)
\&        rsa_tmp=rsa_1024;
\&      else
\&        rsa_tmp=rsa_512; /* Use at least a shorter key */
\&    }
\&    return(rsa_tmp);
\& }
.Ve
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fISSL_CTX_set_tmp_rsa_callback()\fR and \fISSL_set_tmp_rsa_callback()\fR do not return
diagnostic output.
.PP
\&\fISSL_CTX_set_tmp_rsa()\fR and \fISSL_set_tmp_rsa()\fR do return 1 on success and 0
on failure. Check the error queue to find out the reason of failure.
.PP
\&\fISSL_CTX_need_tmp_rsa()\fR and \fISSL_need_tmp_rsa()\fR return 1 if a temporary
\&\s-1RSA\s0 key is needed and 0 otherwise.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIssl\fR\|(3), \fISSL_CTX_set_cipher_list\fR\|(3),
\&\fISSL_CTX_set_options\fR\|(3),
\&\fISSL_CTX_set_tmp_dh_callback\fR\|(3),
\&\fISSL_new\fR\|(3), \fIopenssl_ciphers\fR\|(1)
