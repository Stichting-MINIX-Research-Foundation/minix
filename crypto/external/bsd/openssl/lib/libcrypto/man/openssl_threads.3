.\"	$NetBSD: openssl_threads.3,v 1.14 2015/06/12 17:01:15 christos Exp $
.\"
.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "threads 3"
.TH threads 3 "2009-12-26" "1.0.1n" "OpenSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CRYPTO_THREADID_set_callback, CRYPTO_THREADID_get_callback,
CRYPTO_THREADID_current, CRYPTO_THREADID_cmp, CRYPTO_THREADID_cpy,
CRYPTO_THREADID_hash, CRYPTO_set_locking_callback, CRYPTO_num_locks,
CRYPTO_set_dynlock_create_callback, CRYPTO_set_dynlock_lock_callback,
CRYPTO_set_dynlock_destroy_callback, CRYPTO_get_new_dynlockid,
CRYPTO_destroy_dynlockid, CRYPTO_lock \- OpenSSL thread support
.SH "LIBRARY"
libcrypto, -lcrypto
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/crypto.h>
\&
\& /* Don\*(Aqt use this structure directly. */
\& typedef struct crypto_threadid_st
\&         {
\&         void *ptr;
\&         unsigned long val;
\&         } CRYPTO_THREADID;
\& /* Only use CRYPTO_THREADID_set_[numeric|pointer]() within callbacks */
\& void CRYPTO_THREADID_set_numeric(CRYPTO_THREADID *id, unsigned long val);
\& void CRYPTO_THREADID_set_pointer(CRYPTO_THREADID *id, void *ptr);
\& int CRYPTO_THREADID_set_callback(void (*threadid_func)(CRYPTO_THREADID *));
\& void (*CRYPTO_THREADID_get_callback(void))(CRYPTO_THREADID *);
\& void CRYPTO_THREADID_current(CRYPTO_THREADID *id);
\& int CRYPTO_THREADID_cmp(const CRYPTO_THREADID *a,
\&                         const CRYPTO_THREADID *b);
\& void CRYPTO_THREADID_cpy(CRYPTO_THREADID *dest,
\&                          const CRYPTO_THREADID *src);
\& unsigned long CRYPTO_THREADID_hash(const CRYPTO_THREADID *id);
\&
\& int CRYPTO_num_locks(void);
\&
\& /* struct CRYPTO_dynlock_value needs to be defined by the user */
\& struct CRYPTO_dynlock_value;
\&
\& void CRYPTO_set_dynlock_create_callback(struct CRYPTO_dynlock_value *
\&        (*dyn_create_function)(char *file, int line));
\& void CRYPTO_set_dynlock_lock_callback(void (*dyn_lock_function)
\&        (int mode, struct CRYPTO_dynlock_value *l,
\&        const char *file, int line));
\& void CRYPTO_set_dynlock_destroy_callback(void (*dyn_destroy_function)
\&        (struct CRYPTO_dynlock_value *l, const char *file, int line));
\&
\& int CRYPTO_get_new_dynlockid(void);
\&
\& void CRYPTO_destroy_dynlockid(int i);
\&
\& void CRYPTO_lock(int mode, int n, const char *file, int line);
\&
\& #define CRYPTO_w_lock(type)    \e
\&        CRYPTO_lock(CRYPTO_LOCK|CRYPTO_WRITE,type,_\|_FILE_\|_,_\|_LINE_\|_)
\& #define CRYPTO_w_unlock(type)  \e
\&        CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_WRITE,type,_\|_FILE_\|_,_\|_LINE_\|_)
\& #define CRYPTO_r_lock(type)    \e
\&        CRYPTO_lock(CRYPTO_LOCK|CRYPTO_READ,type,_\|_FILE_\|_,_\|_LINE_\|_)
\& #define CRYPTO_r_unlock(type)  \e
\&        CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_READ,type,_\|_FILE_\|_,_\|_LINE_\|_)
\& #define CRYPTO_add(addr,amount,type)   \e
\&        CRYPTO_add_lock(addr,amount,type,_\|_FILE_\|_,_\|_LINE_\|_)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
OpenSSL can safely be used in multi-threaded applications provided
that at least two callback functions are set, locking_function and
threadid_func.
.PP
locking_function(int mode, int n, const char *file, int line) is
needed to perform locking on shared data structures.
(Note that OpenSSL uses a number of global data structures that
will be implicitly shared whenever multiple threads use OpenSSL.)
Multi-threaded applications will crash at random if it is not set.
.PP
\&\fIlocking_function()\fR must be able to handle up to \fICRYPTO_num_locks()\fR
different mutex locks. It sets the \fBn\fR\-th lock if \fBmode\fR &
\&\fB\s-1CRYPTO_LOCK\s0\fR, and releases it otherwise.
.PP
\&\fBfile\fR and \fBline\fR are the file number of the function setting the
lock. They can be useful for debugging.
.PP
threadid_func(\s-1CRYPTO_THREADID\s0 *id) is needed to record the currently-executing
thread's identifier into \fBid\fR. The implementation of this callback should not
fill in \fBid\fR directly, but should use \fICRYPTO_THREADID_set_numeric()\fR if thread
IDs are numeric, or \fICRYPTO_THREADID_set_pointer()\fR if they are pointer-based.
If the application does not register such a callback using
\&\fICRYPTO_THREADID_set_callback()\fR, then a default implementation is used \- on
Windows and BeOS this uses the system's default thread identifying APIs, and on
all other platforms it uses the address of \fBerrno\fR. The latter is satisfactory
for thread-safety if and only if the platform has a thread-local error number
facility.
.PP
Once \fIthreadid_func()\fR is registered, or if the built-in default implementation is
to be used;
.IP "\(bu" 4
\&\fICRYPTO_THREADID_current()\fR records the currently-executing thread \s-1ID\s0 into the
given \fBid\fR object.
.IP "\(bu" 4
\&\fICRYPTO_THREADID_cmp()\fR compares two thread IDs (returning zero for equality, ie.
the same semantics as \fImemcmp()\fR).
.IP "\(bu" 4
\&\fICRYPTO_THREADID_cpy()\fR duplicates a thread \s-1ID\s0 value,
.IP "\(bu" 4
\&\fICRYPTO_THREADID_hash()\fR returns a numeric value usable as a hash-table key. This
is usually the exact numeric or pointer-based thread \s-1ID\s0 used internally, however
this also handles the unusual case where pointers are larger than 'long'
variables and the platform's thread IDs are pointer-based \- in this case, mixing
is done to attempt to produce a unique numeric value even though it is not as
wide as the platform's true thread IDs.
.PP
Additionally, OpenSSL supports dynamic locks, and sometimes, some parts
of OpenSSL need it for better performance.  To enable this, the following
is required:
.IP "\(bu" 4
Three additional callback function, dyn_create_function, dyn_lock_function
and dyn_destroy_function.
.IP "\(bu" 4
A structure defined with the data that each lock needs to handle.
.PP
struct CRYPTO_dynlock_value has to be defined to contain whatever structure
is needed to handle locks.
.PP
dyn_create_function(const char *file, int line) is needed to create a
lock.  Multi-threaded applications might crash at random if it is not set.
.PP
dyn_lock_function(int mode, CRYPTO_dynlock *l, const char *file, int line)
is needed to perform locking off dynamic lock numbered n. Multi-threaded
applications might crash at random if it is not set.
.PP
dyn_destroy_function(CRYPTO_dynlock *l, const char *file, int line) is
needed to destroy the lock l. Multi-threaded applications might crash at
random if it is not set.
.PP
\&\fICRYPTO_get_new_dynlockid()\fR is used to create locks.  It will call
dyn_create_function for the actual creation.
.PP
\&\fICRYPTO_destroy_dynlockid()\fR is used to destroy locks.  It will call
dyn_destroy_function for the actual destruction.
.PP
\&\fICRYPTO_lock()\fR is used to lock and unlock the locks.  mode is a bitfield
describing what should be done with the lock.  n is the number of the
lock as returned from \fICRYPTO_get_new_dynlockid()\fR.  mode can be combined
from the following values.  These values are pairwise exclusive, with
undefined behaviour if misused (for example, \s-1CRYPTO_READ\s0 and \s-1CRYPTO_WRITE\s0
should not be used together):
.PP
.Vb 4
\&        CRYPTO_LOCK     0x01
\&        CRYPTO_UNLOCK   0x02
\&        CRYPTO_READ     0x04
\&        CRYPTO_WRITE    0x08
.Ve
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fICRYPTO_num_locks()\fR returns the required number of locks.
.PP
\&\fICRYPTO_get_new_dynlockid()\fR returns the index to the newly created lock.
.PP
The other functions return no values.
.SH "NOTES"
.IX Header "NOTES"
You can find out if OpenSSL was configured with thread support:
.PP
.Vb 7
\& #define OPENSSL_THREAD_DEFINES
\& #include <openssl/opensslconf.h>
\& #if defined(OPENSSL_THREADS)
\&   // thread support enabled
\& #else
\&   // no thread support
\& #endif
.Ve
.PP
Also, dynamic locks are currently not used internally by OpenSSL, but
may do so in the future.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
\&\fBcrypto/threads/mttest.c\fR shows examples of the callback functions on
Solaris, Irix and Win32.
.SH "HISTORY"
.IX Header "HISTORY"
\&\fICRYPTO_set_locking_callback()\fR is
available in all versions of SSLeay and OpenSSL.
\&\fICRYPTO_num_locks()\fR was added in OpenSSL 0.9.4.
All functions dealing with dynamic locks were added in OpenSSL 0.9.5b\-dev.
\&\fB\s-1CRYPTO_THREADID\s0\fR and associated functions were introduced in OpenSSL 1.0.0
to replace (actually, deprecate) the previous \fICRYPTO_set_id_callback()\fR,
\&\fICRYPTO_get_id_callback()\fR, and \fICRYPTO_thread_id()\fR functions which assumed
thread IDs to always be represented by 'unsigned long'.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIcrypto\fR\|(3)
