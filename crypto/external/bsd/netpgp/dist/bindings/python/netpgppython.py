# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _netpgppython
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class netpgp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, netpgp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, netpgp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c"] = _netpgppython.netpgp_t_c_set
    __swig_getmethods__["c"] = _netpgppython.netpgp_t_c_get
    if _newclass:c = _swig_property(_netpgppython.netpgp_t_c_get, _netpgppython.netpgp_t_c_set)
    __swig_setmethods__["size"] = _netpgppython.netpgp_t_size_set
    __swig_getmethods__["size"] = _netpgppython.netpgp_t_size_get
    if _newclass:size = _swig_property(_netpgppython.netpgp_t_size_get, _netpgppython.netpgp_t_size_set)
    __swig_setmethods__["name"] = _netpgppython.netpgp_t_name_set
    __swig_getmethods__["name"] = _netpgppython.netpgp_t_name_get
    if _newclass:name = _swig_property(_netpgppython.netpgp_t_name_get, _netpgppython.netpgp_t_name_set)
    __swig_setmethods__["value"] = _netpgppython.netpgp_t_value_set
    __swig_getmethods__["value"] = _netpgppython.netpgp_t_value_get
    if _newclass:value = _swig_property(_netpgppython.netpgp_t_value_get, _netpgppython.netpgp_t_value_set)
    __swig_setmethods__["pubring"] = _netpgppython.netpgp_t_pubring_set
    __swig_getmethods__["pubring"] = _netpgppython.netpgp_t_pubring_get
    if _newclass:pubring = _swig_property(_netpgppython.netpgp_t_pubring_get, _netpgppython.netpgp_t_pubring_set)
    __swig_setmethods__["secring"] = _netpgppython.netpgp_t_secring_set
    __swig_getmethods__["secring"] = _netpgppython.netpgp_t_secring_get
    if _newclass:secring = _swig_property(_netpgppython.netpgp_t_secring_get, _netpgppython.netpgp_t_secring_set)
    __swig_setmethods__["io"] = _netpgppython.netpgp_t_io_set
    __swig_getmethods__["io"] = _netpgppython.netpgp_t_io_get
    if _newclass:io = _swig_property(_netpgppython.netpgp_t_io_get, _netpgppython.netpgp_t_io_set)
    __swig_setmethods__["passfp"] = _netpgppython.netpgp_t_passfp_set
    __swig_getmethods__["passfp"] = _netpgppython.netpgp_t_passfp_get
    if _newclass:passfp = _swig_property(_netpgppython.netpgp_t_passfp_get, _netpgppython.netpgp_t_passfp_set)
    def __init__(self, *args): 
        this = _netpgppython.new_netpgp_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _netpgppython.delete_netpgp_t
    __del__ = lambda self : None;
netpgp_t_swigregister = _netpgppython.netpgp_t_swigregister
netpgp_t_swigregister(netpgp_t)

netpgp_init = _netpgppython.netpgp_init
netpgp_end = _netpgppython.netpgp_end
netpgp_set_debug = _netpgppython.netpgp_set_debug
netpgp_get_debug = _netpgppython.netpgp_get_debug
netpgp_get_info = _netpgppython.netpgp_get_info
netpgp_list_packets = _netpgppython.netpgp_list_packets
netpgp_setvar = _netpgppython.netpgp_setvar
netpgp_getvar = _netpgppython.netpgp_getvar
netpgp_incvar = _netpgppython.netpgp_incvar
netpgp_unsetvar = _netpgppython.netpgp_unsetvar
netpgp_set_homedir = _netpgppython.netpgp_set_homedir
netpgp_list_keys = _netpgppython.netpgp_list_keys
netpgp_find_key = _netpgppython.netpgp_find_key
netpgp_get_key = _netpgppython.netpgp_get_key
netpgp_export_key = _netpgppython.netpgp_export_key
netpgp_import_key = _netpgppython.netpgp_import_key
netpgp_generate_key = _netpgppython.netpgp_generate_key
netpgp_encrypt_file = _netpgppython.netpgp_encrypt_file
netpgp_decrypt_file = _netpgppython.netpgp_decrypt_file
netpgp_sign_file = _netpgppython.netpgp_sign_file
netpgp_verify_file = _netpgppython.netpgp_verify_file
netpgp_sign_memory = _netpgppython.netpgp_sign_memory
netpgp_verify_memory = _netpgppython.netpgp_verify_memory
netpgp_encrypt_memory = _netpgppython.netpgp_encrypt_memory
netpgp_decrypt_memory = _netpgppython.netpgp_decrypt_memory
netpgp_match_keys = _netpgppython.netpgp_match_keys
netpgp_match_pubkeys = _netpgppython.netpgp_match_pubkeys
netpgp_validate_sigs = _netpgppython.netpgp_validate_sigs


