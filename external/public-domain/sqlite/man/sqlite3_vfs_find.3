.Dd March 11, 2017
.Dt SQLITE3_VFS_FIND 3
.Os
.Sh NAME
.Nm sqlite3_vfs_find ,
.Nm sqlite3_vfs_register ,
.Nm sqlite3_vfs_unregister
.Nd Virtual File System Objects
.Sh SYNOPSIS
.Ft sqlite3_vfs *
.Fo sqlite3_vfs_find
.Fa "const char *zVfsName"
.Fc
.Ft int 
.Fo sqlite3_vfs_register
.Fa "sqlite3_vfs*"
.Fa "int makeDflt"
.Fc
.Ft int 
.Fo sqlite3_vfs_unregister
.Fa "sqlite3_vfs*"
.Fc
.Sh DESCRIPTION
A virtual filesystem (VFS) is an sqlite3_vfs object that
SQLite uses to interact with the underlying operating system.
Most SQLite builds come with a single default VFS that is appropriate
for the host computer.
New VFSes can be registered and existing VFSes can be unregistered.
The following interfaces are provided.
.Pp
The sqlite3_vfs_find() interface returns a pointer to a VFS given its
name.
Names are case sensitive.
Names are zero-terminated UTF-8 strings.
If there is no match, a NULL pointer is returned.
If zVfsName is NULL then the default VFS is returned.
.Pp
New VFSes are registered with sqlite3_vfs_register().
Each new VFS becomes the default VFS if the makeDflt flag is set.
The same VFS can be registered multiple times without injury.
To make an existing VFS into the default VFS, register it again with
the makeDflt flag set.
If two different VFSes with the same name are registered, the behavior
is undefined.
If a VFS is registered with a name that is NULL or an empty string,
then the behavior is undefined.
.Pp
Unregister a VFS with the sqlite3_vfs_unregister() interface.
If the default VFS is unregistered, another VFS is chosen as the default.
The choice for the new VFS is arbitrary.
.Sh SEE ALSO
.Xr sqlite3_vfs 3
