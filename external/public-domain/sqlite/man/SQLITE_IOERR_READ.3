.Dd March 11, 2017
.Dt SQLITE_IOERR_READ 3
.Os
.Sh NAME
.Nm SQLITE_IOERR_READ ,
.Nm SQLITE_IOERR_SHORT_READ ,
.Nm SQLITE_IOERR_WRITE ,
.Nm SQLITE_IOERR_FSYNC ,
.Nm SQLITE_IOERR_DIR_FSYNC ,
.Nm SQLITE_IOERR_TRUNCATE ,
.Nm SQLITE_IOERR_FSTAT ,
.Nm SQLITE_IOERR_UNLOCK ,
.Nm SQLITE_IOERR_RDLOCK ,
.Nm SQLITE_IOERR_DELETE ,
.Nm SQLITE_IOERR_BLOCKED ,
.Nm SQLITE_IOERR_NOMEM ,
.Nm SQLITE_IOERR_ACCESS ,
.Nm SQLITE_IOERR_CHECKRESERVEDLOCK ,
.Nm SQLITE_IOERR_LOCK ,
.Nm SQLITE_IOERR_CLOSE ,
.Nm SQLITE_IOERR_DIR_CLOSE ,
.Nm SQLITE_IOERR_SHMOPEN ,
.Nm SQLITE_IOERR_SHMSIZE ,
.Nm SQLITE_IOERR_SHMLOCK ,
.Nm SQLITE_IOERR_SHMMAP ,
.Nm SQLITE_IOERR_SEEK ,
.Nm SQLITE_IOERR_DELETE_NOENT ,
.Nm SQLITE_IOERR_MMAP ,
.Nm SQLITE_IOERR_GETTEMPPATH ,
.Nm SQLITE_IOERR_CONVPATH ,
.Nm SQLITE_IOERR_VNODE ,
.Nm SQLITE_IOERR_AUTH ,
.Nm SQLITE_LOCKED_SHAREDCACHE ,
.Nm SQLITE_BUSY_RECOVERY ,
.Nm SQLITE_BUSY_SNAPSHOT ,
.Nm SQLITE_CANTOPEN_NOTEMPDIR ,
.Nm SQLITE_CANTOPEN_ISDIR ,
.Nm SQLITE_CANTOPEN_FULLPATH ,
.Nm SQLITE_CANTOPEN_CONVPATH ,
.Nm SQLITE_CORRUPT_VTAB ,
.Nm SQLITE_READONLY_RECOVERY ,
.Nm SQLITE_READONLY_CANTLOCK ,
.Nm SQLITE_READONLY_ROLLBACK ,
.Nm SQLITE_READONLY_DBMOVED ,
.Nm SQLITE_ABORT_ROLLBACK ,
.Nm SQLITE_CONSTRAINT_CHECK ,
.Nm SQLITE_CONSTRAINT_COMMITHOOK ,
.Nm SQLITE_CONSTRAINT_FOREIGNKEY ,
.Nm SQLITE_CONSTRAINT_FUNCTION ,
.Nm SQLITE_CONSTRAINT_NOTNULL ,
.Nm SQLITE_CONSTRAINT_PRIMARYKEY ,
.Nm SQLITE_CONSTRAINT_TRIGGER ,
.Nm SQLITE_CONSTRAINT_UNIQUE ,
.Nm SQLITE_CONSTRAINT_VTAB ,
.Nm SQLITE_CONSTRAINT_ROWID ,
.Nm SQLITE_NOTICE_RECOVER_WAL ,
.Nm SQLITE_NOTICE_RECOVER_ROLLBACK ,
.Nm SQLITE_WARNING_AUTOINDEX ,
.Nm SQLITE_AUTH_USER ,
.Nm SQLITE_OK_LOAD_PERMANENTLY
.Nd Extended Result Codes
.Sh SYNOPSIS
.Fd #define SQLITE_IOERR_READ
.Fd #define SQLITE_IOERR_SHORT_READ
.Fd #define SQLITE_IOERR_WRITE
.Fd #define SQLITE_IOERR_FSYNC
.Fd #define SQLITE_IOERR_DIR_FSYNC
.Fd #define SQLITE_IOERR_TRUNCATE
.Fd #define SQLITE_IOERR_FSTAT
.Fd #define SQLITE_IOERR_UNLOCK
.Fd #define SQLITE_IOERR_RDLOCK
.Fd #define SQLITE_IOERR_DELETE
.Fd #define SQLITE_IOERR_BLOCKED
.Fd #define SQLITE_IOERR_NOMEM
.Fd #define SQLITE_IOERR_ACCESS
.Fd #define SQLITE_IOERR_CHECKRESERVEDLOCK
.Fd #define SQLITE_IOERR_LOCK
.Fd #define SQLITE_IOERR_CLOSE
.Fd #define SQLITE_IOERR_DIR_CLOSE
.Fd #define SQLITE_IOERR_SHMOPEN
.Fd #define SQLITE_IOERR_SHMSIZE
.Fd #define SQLITE_IOERR_SHMLOCK
.Fd #define SQLITE_IOERR_SHMMAP
.Fd #define SQLITE_IOERR_SEEK
.Fd #define SQLITE_IOERR_DELETE_NOENT
.Fd #define SQLITE_IOERR_MMAP
.Fd #define SQLITE_IOERR_GETTEMPPATH
.Fd #define SQLITE_IOERR_CONVPATH
.Fd #define SQLITE_IOERR_VNODE
.Fd #define SQLITE_IOERR_AUTH
.Fd #define SQLITE_LOCKED_SHAREDCACHE
.Fd #define SQLITE_BUSY_RECOVERY
.Fd #define SQLITE_BUSY_SNAPSHOT
.Fd #define SQLITE_CANTOPEN_NOTEMPDIR
.Fd #define SQLITE_CANTOPEN_ISDIR
.Fd #define SQLITE_CANTOPEN_FULLPATH
.Fd #define SQLITE_CANTOPEN_CONVPATH
.Fd #define SQLITE_CORRUPT_VTAB
.Fd #define SQLITE_READONLY_RECOVERY
.Fd #define SQLITE_READONLY_CANTLOCK
.Fd #define SQLITE_READONLY_ROLLBACK
.Fd #define SQLITE_READONLY_DBMOVED
.Fd #define SQLITE_ABORT_ROLLBACK
.Fd #define SQLITE_CONSTRAINT_CHECK
.Fd #define SQLITE_CONSTRAINT_COMMITHOOK
.Fd #define SQLITE_CONSTRAINT_FOREIGNKEY
.Fd #define SQLITE_CONSTRAINT_FUNCTION
.Fd #define SQLITE_CONSTRAINT_NOTNULL
.Fd #define SQLITE_CONSTRAINT_PRIMARYKEY
.Fd #define SQLITE_CONSTRAINT_TRIGGER
.Fd #define SQLITE_CONSTRAINT_UNIQUE
.Fd #define SQLITE_CONSTRAINT_VTAB
.Fd #define SQLITE_CONSTRAINT_ROWID
.Fd #define SQLITE_NOTICE_RECOVER_WAL
.Fd #define SQLITE_NOTICE_RECOVER_ROLLBACK
.Fd #define SQLITE_WARNING_AUTOINDEX
.Fd #define SQLITE_AUTH_USER
.Fd #define SQLITE_OK_LOAD_PERMANENTLY
.Sh DESCRIPTION
In its default configuration, SQLite API routines return one of 30
integer result codes.
However, experience has shown that many of these result codes are too
coarse-grained.
They do not provide as much information about problems as programmers
might like.
In an effort to address this, newer versions of SQLite (version 3.3.8
dateof:3.3.8 and later) include support for additional
result codes that provide more detailed information about errors.
These extended result codes are enabled or disabled
on a per database connection basis using the sqlite3_extended_result_codes()
API.
Or, the extended code for the most recent error can be obtained using
sqlite3_extended_errcode().
.Sh SEE ALSO
.Xr sqlite3_errcode 3 ,
.Xr sqlite3_extended_result_codes 3
