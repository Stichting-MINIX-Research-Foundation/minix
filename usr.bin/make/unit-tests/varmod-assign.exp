Global:param = twice
Global:VARNAME = VAR.$${param}
Var_Parse: ${VARNAME} (eval)
Global:VAR.${param} = initial-value
Var_Parse: ${${VARNAME}::=assigned-value} (eval-defined)
Var_Parse: ${VARNAME}::=assigned-value} (eval-defined)
Applying ${VAR.${param}::...} to "initial-value" (eval-defined, none, regular)
Modifier part: "assigned-value"
Global:VAR.${param} = assigned-value
Result of ${VAR.${param}::=assigned-value} is "" (eval-defined, none, regular)
Var_Parse: ${${VARNAME}} != "assigned-value" (eval-defined)
Var_Parse: ${VARNAME}} != "assigned-value" (eval-defined)
Global:.MAKEFLAGS =  -r -k -d v -d
Global:.MAKEFLAGS =  -r -k -d v -d 0
mod-assign: first=1.
mod-assign: last=3.
mod-assign: appended=1 2 3.
1
2
3
mod-assign: ran:3.
mod-assign: global: 1, 3, 1 2 3, 3.
mod-assign-nested: then1t1
mod-assign-nested: else2e2
mod-assign-nested: then3t3
mod-assign-nested: else4e4
make: Bad modifier ":" for variable ""
mod-assign-empty: value}
make: Bad modifier ":" for variable ""
mod-assign-empty: overwritten}
mod-assign-empty: VAR=overwritten
make: Unknown modifier ":x"

sysv:y
make: Unfinished modifier for "ASSIGN" ('}' missing)

ok=word
make: " echo word; false " returned non-zero status
err=previous
exit status 0
