.\"	$NetBSD: strtou.3,v 1.3 2015/07/11 15:51:33 wiz Exp $
.\"
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     from: @(#)strtoul.3	8.1 (Berkeley) 6/4/93
.\"
.\" Created by Kamil Rytarowski, based on ID:
.\" NetBSD: strtoul.3,v 1.29 2015/03/10 13:00:58 christos Exp
.\"
.Dd April 30, 2015
.Dt STRTOU 3
.Os
.Sh NAME
.Nm strtou
.Nd convert a string to an uintmax_t integer
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In inttypes.h
.Ft uintmax_t
.Fo strtou
.Fa "const char * restrict nptr"
.Fa "char ** restrict endptr"
.Fa "int base"
.Fa "uintmax_t lo"
.Fa "uintmax_t hi"
.Fa "int *rstatus"
.Fc
.Sh DESCRIPTION
The
.Fn strtou
function converts the string in
.Fa nptr
to an
.Ft uintmax_t
value.
The
.Fn strtou
function uses internally
.Xr strtoumax 3
and ensures that the result is always in the range [
.Fa lo ..
.Fa hi
].
In adddition it always places
.Dv 0
on success or a conversion status in the
.Fa rstatus
argument, avoiding the
.Dv errno
gymnastics the other functions require.
The
.Fa rstatus
argument can be
.Dv NULL
if conversion status is to be ignored.
.Pp
The string may begin with an arbitrary amount of white space
(as determined by
.Xr isspace 3 )
followed by a single optional
.Ql +
or
.Ql -
sign.
If
.Fa base
is zero or 16,
the string may then include a
.Ql 0x
prefix,
and the number will be read in base 16; otherwise, a zero
.Fa base
is taken as 10 (decimal) unless the next character is
.Ql 0 ,
in which case it is taken as 8 (octal).
.Pp
The remainder of the string is converted to an
.Em uintmax_t
value in the obvious manner,
stopping at the end of the string
or at the first character that does not produce a valid digit
in the given base.
(In bases above 10, the letter
.Ql A
in either upper or lower case
represents 10,
.Ql B
represents 11, and so forth, with
.Ql Z
representing 35.)
.Pp
If
.Fa endptr
is non-nil,
.Fn strtou
stores the address of the first invalid character in
.Fa *endptr .
If there were no digits at all, however,
.Fn strtou
stores the original value of
.Fa nptr
in
.Fa *endptr .
(Thus, if
.Fa *nptr
is not
.Ql \e0
but
.Fa **endptr
is
.Ql \e0
on return, the entire string was valid.)
.Sh RETURN VALUES
The
.Fn strtou
function
always returns the closest value in the range specified by
the
.Fa lo
and
.Fa hi
arguments.
.Pp
The
.Va errno
value is guaranteed to be left unchanged.
.Pp
Errors are stored as the conversion status in the
.Fa rstatus
argument.
.Sh EXAMPLES
The following example will always return a number in
.Dv [1..99]
range no matter what the input is, and warn if the conversion failed.
.Bd -literal -offset indent
int e;
uintmax_t lval = strtou(buf, NULL, 0, 1, 99, &e);
if (e)
	warnc(e, "conversion of `%s' to a number failed, using %ju",
	    buf, lval);
.Ed
.Sh ERRORS
.Bl -tag -width Er
.It Bq Er ECANCELED
The string did not contain any characters that were converted.
.It Bq Er EINVAL
The
.Ar base
is not between 2 and 36 and does not contain the special value 0.
.It Bq Er ENOTSUP
The string contained non-numeric characters that did not get converted.
In this case,
.Fa endptr
points to the first unconverted character.
.It Bq Er ERANGE
The given string was out of range; the value converted has been clamped; or
the range given was invalid, i.e.
.Fa lo
\*[Gt]
.Fa hi .
.El
.Sh SEE ALSO
.Xr atof 3 ,
.Xr atoi 3 ,
.Xr atol 3 ,
.Xr atoll 3 ,
.Xr strtod 3 ,
.Xr strtoi 3 ,
.Xr strtoimax 3 ,
.Xr strtol 3 ,
.Xr strtoll 3 ,
.Xr strtoul 3 ,
.Xr strtoull 3 ,
.Xr strtoumax 3
.Sh STANDARDS
The
.Fn strtou
function is a
.Nx
extension.
.Sh HISTORY
The
.Fn strtou
function first appeared in
.Nx 7 .
.Ox
introduced the
.Fn strtonum 3
function for the same purpose, but the interface makes it impossible to
properly differentiate illegal returns.
.Sh BUGS
Ignores the current locale.
