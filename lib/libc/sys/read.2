.\"	$NetBSD: read.2,v 1.34 2011/12/12 19:11:21 njoly Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)read.2	8.4 (Berkeley) 2/26/94
.\"
.Dd December 12, 2011
.Dt READ 2
.Os
.Sh NAME
.Nm read ,
.Nm readv ,
.Nm pread ,
.Nm preadv
.Nd read input
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In unistd.h
.Ft ssize_t
.Fn read "int d" "void *buf" "size_t nbytes"
.Ft ssize_t
.Fn pread "int d" "void *buf" "size_t nbytes" "off_t offset"
.In sys/uio.h
.Ft ssize_t
.Fn readv "int d" "const struct iovec *iov" "int iovcnt"
.Ft ssize_t
.Fn preadv "int d" "const struct iovec *iov" "int iovcnt" "off_t offset"
.Sh DESCRIPTION
.Fn read
attempts to read
.Fa nbytes
of data from the object referenced by the descriptor
.Fa d
into the buffer pointed to by
.Fa buf .
.Fn readv
performs the same action, but scatters the input data
into the
.Fa iovcnt
buffers specified by the members of the
.Fa iov
array: iov[0], iov[1], ..., iov[iovcnt\|\-\|1].
.Fn pread
and
.Fn preadv
perform the same functions, but read from the specified position in
the file without modifying the file pointer.
.Pp
For
.Fn readv
and
.Fn preadv ,
the
.Fa iovec
structure is defined as:
.Pp
.Bd -literal -offset indent -compact
struct iovec {
	void *iov_base;
	size_t iov_len;
};
.Ed
.Pp
Each
.Fa iovec
entry specifies the base address and length of an area
in memory where data should be placed.
.Fn readv
will always fill an area completely before proceeding
to the next.
.Pp
On objects capable of seeking, the
.Fn read
starts at a position
given by the file pointer associated with
.Fa d
(see
.Xr lseek 2 ) .
Upon return from
.Fn read ,
the file pointer is incremented by the number of bytes actually read.
.Pp
Objects that are not capable of seeking always read from the current
position.
The value of the file pointer associated with such an object is undefined.
.Pp
Upon successful completion,
.Fn read ,
.Fn readv ,
.Fn pread ,
and
.Fn preadv
return the number of bytes actually read and placed in the buffer.
The system guarantees to read the number of bytes requested if
the descriptor references a normal file that has that many bytes left
before the end-of-file, but in no other case.
.Sh RETURN VALUES
If successful, the
number of bytes actually read is returned.
Upon reading end-of-file, zero is returned.
Otherwise, a \-1 is returned and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
.Fn read ,
.Fn readv ,
.Fn pread ,
and
.Fn preadv
will succeed unless:
.Bl -tag -width Er
.It Bq Er EAGAIN
The file was marked for non-blocking I/O,
and no data were ready to be read.
.It Bq Er EBADF
.Fa d
is not a valid file or socket descriptor open for reading.
.It Bq Er EFAULT
.Fa buf
points outside the allocated address space.
.It Bq Er EINTR
A read from a slow device
(i.e. one that might block for an arbitrary amount of time)
was interrupted by the delivery of a signal
before any data arrived.
See
.Xr sigaction 2
for more information on the interaction between signals and system
calls.
.It Bq Er EINVAL
The file pointer associated with
.Fa d
was negative; or
the total length of the I/O is more than can be expressed by the ssize_t
return value.
.It Bq Er EIO
An I/O error occurred while reading from the file system.
.It Bq Er EISDIR
.Fa d
refers to a directory and the implementation does not allow the directory
to be read using
.Fn read
or
.Fn pread .
The
.Fn readdir
function should be used instead.
.El
.Pp
In addition,
.Fn readv
and
.Fn preadv
may return one of the following errors:
.Bl -tag -width Er
.It Bq Er EFAULT
Part of the
.Fa iov
points outside the process's allocated address space.
.It Bq Er EINVAL
.Fa iovcnt
was less than or equal to 0, or greater than
.Dv {IOV_MAX} ;
or one of the
.Fa iov_len
values in the
.Fa iov
array was negative; or
the sum of the
.Fa iov_len
values in the
.Fa iov
array overflowed a 32-bit integer.
.El
.Pp
The
.Fn pread
and
.Fn preadv
calls may also return the following errors:
.Bl -tag -width Er
.It Bq Er EINVAL
The specified file offset is invalid.
.It Bq Er ESPIPE
The file descriptor is associated with a pipe, socket, or FIFO.
.El
.Sh SEE ALSO
.Xr dup 2 ,
.Xr fcntl 2 ,
.Xr open 2 ,
.Xr pipe 2 ,
.Xr poll 2 ,
.Xr select 2 ,
.Xr sigaction 2 ,
.Xr socket 2 ,
.Xr socketpair 2
.Sh STANDARDS
The
.Fn read
function conforms to
.St -p1003.1-90 .
The
.Fn readv
and
.Fn pread
functions conform to
.St -xpg4.2 .
.Sh HISTORY
The
.Fn preadv
function call
appeared in
.Nx 1.4 .
The
.Fn pread
function call
appeared in
.At V.4 .
The
.Fn readv
function call
appeared in
.Bx 4.2 .
The
.Fn read
function call appeared in
.At v2 .
.Sh CAVEATS
Error checks should explicitly test for \-1.
Code such as
.Bd -literal
	while ((nr = read(fd, buf, sizeof(buf))) \*[Gt] 0)
.Ed
.Pp
is not maximally portable, as some platforms allow for
.Va nbytes
to range between
.Dv SSIZE_MAX
and
.Dv SIZE_MAX
\- 2, in which case the return value of an error-free
.Fn read
may appear as a negative number distinct from \-1.
Proper loops should use
.Bd -literal
	while ((nr = read(fd, buf, sizeof(buf))) != -1 \*[Am]\*[Am] nr != 0)
.Ed
